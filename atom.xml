<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>杨诚|Mr. Yang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-23T06:16:57.299Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>杨诚</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hive中MapJoin的原理和机制</title>
    <link href="http://yoursite.com/2018/07/23/Hive%E4%B8%ADMapJoin%E7%9A%84%E5%8E%9F%E7%90%86%E5%92%8C%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/07/23/Hive中MapJoin的原理和机制/</id>
    <published>2018-07-23T05:51:34.000Z</published>
    <updated>2018-07-23T06:16:57.299Z</updated>
    
    <content type="html"><![CDATA[<p>笼统的说，Hive中的Join可分为Common Join（Reduce阶段完成join）和Map Join（Map阶段完成join）。本文简单介绍一下两种join的原理和机制。</p><h3 id="1-Hive-Common-Join"><a href="#1-Hive-Common-Join" class="headerlink" title="1 Hive Common Join"></a>1 Hive Common Join</h3><p>如果不指定MapJoin或者不符合MapJoin的条件，那么Hive解析器会将Join操作转换成Common Join,即：在Reduce阶段完成join.<br>整个过程包含Map、Shuffle、Reduce阶段。</p><h4 id="Map阶段"><a href="#Map阶段" class="headerlink" title="Map阶段"></a>Map阶段</h4><ul><li>读取源表的数据，Map输出时候以Join on条件中的列为key，如果Join有多个关联键，则以这些关联键的组合作为key; </li><li>Map输出的value为join之后所关心的(select或者where中需要用到的)列；同时在value中还会包含表的Tag信息，用于标明此value对应哪个表；</li><li>按照key进行排序</li></ul><h4 id="Shuffle阶段"><a href="#Shuffle阶段" class="headerlink" title="Shuffle阶段"></a>Shuffle阶段</h4><p>根据key的值进行<strong>hash</strong>,并将key/value按照hash值推送至不同的reduce中，这样确保两个表中相同的key位于同一个reduce中</p><h4 id="Reduce阶段"><a href="#Reduce阶段" class="headerlink" title="Reduce阶段"></a>Reduce阶段</h4><p>根据key的值完成join操作，期间通过Tag来识别不同表中的数据。<br>以下面的HQL为例，图解其过程：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">a.id,a.dept,b.age</span><br><span class="line">FROM a join b</span><br><span class="line">ON (a.id = b.id);</span><br></pre></td></tr></table></figure></p><p><img src="/2018/07/23/Hive中MapJoin的原理和机制/images/HQL流程.png" alt="HQL流程"></p><p>看了这个图，应该知道如何使用MapReduce进行join操作了吧。</p><h3 id="2-Hive-Map-Join"><a href="#2-Hive-Map-Join" class="headerlink" title="2 Hive Map Join"></a>2 Hive Map Join</h3><ul><li>MapJoin通常用于一个很小的表和一个大表进行join的场景，具体小表有多小，由参数 <strong>hive.mapjoin.smalltable.filesize</strong>来决定，该参数表示小表的总大小，默认值为<strong>25000000字节，</strong>即25M.</li><li>Hive0.7之前，需要使用hint提示<strong> /<em>+ mapjoin(table) </em>/</strong>才会执行MapJoin,否则执行Common Join，但在0.7版本之后，默认自动会转换Map Join，由数 <strong>hive.auto.convert.join</strong>来控制，默认为true.</li><li>仍然以9.1中的HQL来说吧，假设a表为一张大表，b为小表，并且hive.auto.convert.join=true,那么Hive在执行时候会自动转化为MapJoin。</li></ul><p><img src="/2018/07/23/Hive中MapJoin的原理和机制/images/Hive的MapJoin流程.png" alt="Hive的MapJoin流程"></p><ul><li>执行流程如下：<ul><li>如图中的流程，首先是Task A，它是一个Local Task（在客户端本地执行的Task），负责扫描小表b的数据，将其转换成一个HashTable的数据结构，并写入本地的文件中，之后将该文件加载到<strong>DistributeCache</strong>中，该HashTable的数据结构可以抽象为：<br>|key| value|<br>| 1 | 26 |<br>| 2 | 34 |</li></ul></li></ul><p><img src="/2018/07/23/Hive中MapJoin的原理和机制/images/LocalTask信息.png" alt="LocalTask信息"><br>图中红框圈出了执行Local Task的信息。</p><ul><li>接下来是Task B，该任务是一个没有Reduce的MR，启动MapTasks扫描大表a,在Map阶段，根据a的每一条记录去和DistributeCache中b表对应的HashTable关联，并直接输出结果。</li><li>由于MapJoin没有Reduce，所以由Map直接输出结果文件，有多少个Map Task，就有多少个结果文件</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;笼统的说，Hive中的Join可分为Common Join（Reduce阶段完成join）和Map Join（Map阶段完成join）。本文简单介绍一下两种join的原理和机制。&lt;/p&gt;
&lt;h3 id=&quot;1-Hive-Common-Join&quot;&gt;&lt;a href=&quot;#1-Hiv
      
    
    </summary>
    
      <category term="Hadoop" scheme="http://yoursite.com/categories/Hadoop/"/>
    
    
      <category term="Hive" scheme="http://yoursite.com/tags/Hive/"/>
    
      <category term="Hadoop" scheme="http://yoursite.com/tags/Hadoop/"/>
    
      <category term="MapJoin" scheme="http://yoursite.com/tags/MapJoin/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/07/23/hello-world/"/>
    <id>http://yoursite.com/2018/07/23/hello-world/</id>
    <published>2018-07-23T02:02:39.885Z</published>
    <updated>2018-07-23T02:02:39.886Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
